{"version":3,"sources":["components/form.js","components/list.js","components/app.js","serviceWorker.js","index.js"],"names":["Form","handleChange","handleSubmit","value","onSubmit","event","name","type","onChange","placeholder","className","List","handleDelete","list","map","item","index","key","onClick","App","props","setState","target","state","filter","preventDefault","this","console","log","data-testid","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gOAeeA,G,MAbF,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,MAA/B,OACX,0BAAMC,SAAU,SAACC,GAAD,OAAWH,EAAaG,EAAOF,KAC7C,2BACEG,KAAK,OACLC,KAAK,OACLJ,MAAOA,EACPK,SAAUP,EACVQ,YAAY,kBAEhB,4BAAQF,KAAK,SAASG,UAAU,UAAhC,aCUaC,EAnBF,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,KAC5B,OACE,4BACGA,EAAKC,KAAI,SAACC,EAAMC,GAAP,OACR,wBAAIC,IAAKD,EAAQD,GACf,8BAAOA,GACP,4BACER,KAAK,SACLG,UAAU,SACVQ,QAAS,kBAAMN,EAAaG,KAH9B,gBCyCKI,E,kDA1Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORnB,aAAe,SAAAI,GAAK,OAAI,EAAKgB,SAAS,CAAElB,MAAOE,EAAMiB,OAAOnB,SARzC,EASnBS,aAAe,SAAAT,GAAK,OAClB,EAAKkB,SAAS,CACZR,KAAM,EAAKU,MAAMV,KAAKW,QAAO,SAAAT,GAAI,OAAIZ,IAAUY,QAXhC,EAanBb,aAAe,SAAAG,GACbA,EAAMoB,iBACN,EAAKJ,UAAS,SAAAE,GACZ,MAAO,CACLpB,MAAO,GACPU,KAAK,GAAD,mBAAMU,EAAMV,MAAZ,CAAkBU,EAAMpB,aAhBhC,EAAKoB,MAAQ,CACXpB,MAAO,GACPU,KAAM,CAAC,OAAQ,OAAQ,iBAJR,E,qDAuBT,IAAD,EACiBa,KAAKH,MAArBV,EADD,EACCA,KAAMV,EADP,EACOA,MAGd,OAFAwB,QAAQC,IAAIf,GAGV,yBAAKgB,cAAY,MAAMnB,UAAU,OAC/B,kEACA,6DACA,kBAAC,EAAD,CACET,aAAcyB,KAAKzB,aACnBC,aAAcwB,KAAKxB,aACnBC,MAAOA,IAET,kBAAC,EAAD,CAAMS,aAAcc,KAAKd,aAAcC,KAAMA,S,GArCnCiB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.80a419ab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({ handleChange, handleSubmit, value }) => (\r\n  <form onSubmit={(event) => handleSubmit(event, value)}>\r\n    <input\r\n      name=\"item\"\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={handleChange}\r\n      placeholder=\"Enter an item\"\r\n    />\r\n  <button type=\"submit\" className=\"submit\">Submit</button>\r\n  </form>\r\n)\r\n\r\nexport default Form;\r\n","import React from \"react\"\r\n\r\nconst List = ({ handleDelete, list }) => {\r\n  return (\r\n    <ul>\r\n      {list.map((item, index) => (\r\n        <li key={index + item}>\r\n          <span>{item}</span>\r\n          <button\r\n            type=\"button\"\r\n            className=\"delete\"\r\n            onClick={() => handleDelete(item)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default List\r\n","import React from \"react\"\nimport \"./styles.css\"\n\nimport Form from \"./form\"\nimport List from \"./list\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: \"\",\n      list: [\"Eggs\", \"Milk\", \"Toilet Paper\"],\n    }\n  }\n\n  handleChange = event => this.setState({ value: event.target.value })\n  handleDelete = value =>\n    this.setState({\n      list: this.state.list.filter(item => value !== item),\n    })\n  handleSubmit = event => {\n    event.preventDefault()\n    this.setState(state => {\n      return {\n        value: \"\",\n        list: [...state.list, state.value],\n      }\n    })\n  }\n\n  render() {\n    const { list, value } = this.state\n    console.log(list)\n\n    return (\n      <div data-testid=\"app\" className=\"app\">\n        <h1>State Management Using React Hooks</h1>\n        <h2>A friendly to do list example</h2>\n        <Form\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          value={value}\n        />\n        <List handleDelete={this.handleDelete} list={list} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/app';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}