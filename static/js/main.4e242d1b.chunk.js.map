{"version":3,"sources":["components/form.js","components/items.js","components/app.js","serviceWorker.js","index.js"],"names":["Form","handleChange","handleSubmit","value","name","type","onChange","placeholder","className","onClick","event","Items","handleDelete","items","map","item","index","key","App","setState","target","preventDefault","state","filter","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAeeA,G,MAbF,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,MAA/B,OACX,8BACE,2BACEC,KAAK,OACLC,KAAK,OACLF,MAAOA,EACPG,SAAUL,EACVM,YAAY,kBAEhB,4BAAQF,KAAK,SAASG,UAAU,SAASC,QAAS,SAAAC,GAAK,OAAIR,EAAaQ,KAAxE,aCIaC,EAbD,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,MAC7B,OACE,4BACCA,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACP,wBAAIC,IAAKD,EAAQD,GACf,8BAAOA,GACP,4BAAQV,KAAK,SAASG,UAAU,SAASC,QAAS,kBAAMG,EAAaG,KAArE,gBC+CKG,E,kDAhDb,aAAe,IAAD,8BACZ,gBAOFjB,aAAe,SAAAS,GAEb,EAAKS,SAAS,CAAEhB,MAAOO,EAAMU,OAAOjB,SAVxB,EAadD,aAAe,SAAAQ,GACbA,EAAMW,iBACN,EAAKF,UAAS,SAAAG,GAGZ,MAAO,CACLnB,MAAO,GACPU,MAHS,sBAAOS,EAAMT,OAAb,CAAoBS,EAAMnB,aAjB3B,EAyBdS,aAAe,SAAAG,GACb,EAAKI,UAAS,SAAAG,GAGZ,MAAO,CACLnB,MAAO,GACPU,MAHYS,EAAMT,MAAMU,QAAO,SAAApB,GAAK,OAAIY,IAASZ,UA1BrD,EAAKmB,MAAQ,CACXnB,MAAO,GACPU,MAAO,CAAE,OAAQ,OAAQ,iBAJf,E,qDAqCZ,OACE,yBAAKL,UAAU,OACb,uEACA,6DACA,kBAAC,EAAD,CAAMP,aAAcuB,KAAKvB,aAAcC,aAAcsB,KAAKtB,aAAcC,MAAOqB,KAAKF,MAAMnB,QAC1F,kBAAC,EAAD,CAAOS,aAAcY,KAAKZ,aAAcC,MAAOW,KAAKF,MAAMT,a,GA3ChDY,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4e242d1b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({ handleChange, handleSubmit, value }) => (\r\n  <form>\r\n    <input\r\n      name=\"item\"\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={handleChange}\r\n      placeholder=\"Enter an item\"\r\n    />\r\n  <button type=\"submit\" className=\"submit\" onClick={event => handleSubmit(event)}>Submit</button>\r\n  </form>\r\n)\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Items = ({ handleDelete, items }) => {\r\n  return (\r\n    <ul>\r\n    {items.map((item, index) => (\r\n        <li key={index + item}>\r\n          <span>{item}</span>\r\n          <button type=\"button\" className=\"delete\" onClick={() => handleDelete(item)}>Delete</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Items;\r\n","import React from 'react';\r\nimport './styles.css';\r\n\r\nimport Form from './form';\r\nimport Items from './items';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      value: '',\r\n      items: [ \"Eggs\", \"Milk\", \"Toilet Paper\" ]\r\n    }\r\n  }\r\n\r\n  handleChange = event => {\r\n    // Update value during onChange\r\n    this.setState({ value: event.target.value })\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.setState(state => {\r\n      // Add array value without mutating state\r\n      const items = [...state.items, state.value];\r\n      return {\r\n        value: '', // reset\r\n        items // replace\r\n      }\r\n    })\r\n  }\r\n\r\n  handleDelete = item => {\r\n    this.setState(state => {\r\n      // Remove the unwanted item by element name\r\n      const items = state.items.filter(value => item !== value);\r\n      return {\r\n        value: '', // reset\r\n        items // replace\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <h1>State Management Using React Components</h1>\r\n        <h2>A friendly to do list example</h2>\r\n        <Form handleChange={this.handleChange} handleSubmit={this.handleSubmit} value={this.state.value} />\r\n        <Items handleDelete={this.handleDelete} items={this.state.items} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/app';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}